@import 'tailwindcss';

@custom-variant dark (&:is(.dark *));

@theme {
  --color-border: hsl(var(--border));
  --color-input: hsl(var(--input));
  --color-ring: hsl(var(--ring));
  --color-background: hsl(var(--background));
  --color-foreground: hsl(var(--foreground));

  --color-primary: hsl(var(--primary));
  --color-primary-foreground: hsl(var(--primary-foreground));

  --color-secondary: hsl(var(--secondary));
  --color-secondary-foreground: hsl(var(--secondary-foreground));

  --color-destructive: hsl(var(--destructive));
  --color-destructive-foreground: hsl(var(--destructive-foreground));

  --color-muted: hsl(var(--muted));
  --color-muted-foreground: hsl(var(--muted-foreground));

  --color-accent: hsl(var(--accent));
  --color-accent-foreground: hsl(var(--accent-foreground));

  --color-popover: hsl(var(--popover));
  --color-popover-foreground: hsl(var(--popover-foreground));

  --color-card: hsl(var(--card));
  --color-card-foreground: hsl(var(--card-foreground));

  --radius-lg: var(--radius);
  --radius-md: calc(var(--radius) - 2px);
  --radius-sm: calc(var(--radius) - 4px);

  --animate-accordion-down: accordion-down 0.2s ease-out;
  --animate-accordion-up: accordion-up 0.2s ease-out;

  @keyframes accordion-down {
    from {
      height: 0;
    }
    to {
      height: var(--radix-accordion-content-height);
    }
  }
  @keyframes accordion-up {
    from {
      height: var(--radix-accordion-content-height);
    }
    to {
      height: 0;
    }
  }
}

@utility container {
  margin-inline: auto;
  padding-inline: 1rem;
  @media (width >= --theme(--breakpoint-sm)) {
    max-width: none;
  }
  @media (width >= 1200px) {
    max-width: 1200px;
  }
}

/*
  The default border color has changed to `currentColor` in Tailwind CSS v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with Tailwind CSS v3.

  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/
@layer base {
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-gray-200, currentColor);
  }
}

@layer base {
  :root {
    /* Base colors */
    --background: 36 33% 97%;
    --foreground: 16 24% 29%;

    /* Turkish-inspired color palette */
    --turkish-red: 0 60% 49%;
    --turkish-blue: 190 100% 27%;
    --turkish-sand: 36 33% 90%;
    --turkish-brown: 16 24% 29%;
    --turkish-cream: 36 33% 97%;

    /* Component colors */
    --card: 0 0% 100%;
    --card-foreground: 16 24% 29%;

    --primary: var(--turkish-red);
    --primary-foreground: 0 0% 100%;

    --secondary: var(--turkish-blue);
    --secondary-foreground: 0 0% 100%;

    --muted: var(--turkish-sand);
    --muted-foreground: var(--turkish-brown);

    --accent: 36 27% 82%;
    --accent-foreground: var(--turkish-brown);

    --destructive: 0 84% 60%;
    --destructive-foreground: 0 0% 100%;

    --border: 36 27% 82%;
    --input: 36 27% 82%;
    --ring: var(--turkish-red);

    --radius: 0.5rem;
  }

  .dark {
    --background: 20 14% 10%;
    --foreground: 36 33% 90%;

    --card: 24 9% 15%;
    --card-foreground: 36 33% 90%;

    --primary: 0 70% 54%;
    --primary-foreground: 0 0% 100%;

    --secondary: 190 90% 30%;
    --secondary-foreground: 0 0% 100%;

    --muted: 12 8% 18%;
    --muted-foreground: 36 20% 70%;

    --accent: 12 8% 20%;
    --accent-foreground: 36 33% 90%;

    --destructive: 0 84% 60%;
    --destructive-foreground: 36 33% 90%;

    --border: 24 8% 30%;
    --input: 24 8% 30%;
    --ring: 0 70% 54%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1;
  }
}

/* Turkish-inspired decorative elements */
.turkish-pattern-top {
  background-image: url("data:image/svg+xml,%3Csvg width='20' height='10' viewBox='0 0 20 10' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0 10c5.523 0 10-4.477 10-10S5.523 0 0 0v10zm20 0c-5.523 0-10-4.477-10-10S14.477 0 20 0v10z' fill='%23c83232' fill-opacity='0.1' fill-rule='evenodd'/%3E%3C/svg%3E");
  background-repeat: repeat-x;
}

.turkish-pattern-bottom {
  background-image: url("data:image/svg+xml,%3Csvg width='20' height='10' viewBox='0 0 20 10' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0 0c5.523 0 10 4.477 10 10S5.523 20 0 20V0zm20 0c-5.523 0-10 4.477-10 10s4.477 10 10 10V0z' fill='%23c83232' fill-opacity='0.1' fill-rule='evenodd'/%3E%3C/svg%3E");
  background-repeat: repeat-x;
}

.menu-card-shadow {
  box-shadow: 0 2px 8px rgba(93, 64, 55, 0.08);
}

.price-tag {
  background-color: hsl(var(--primary));
  color: hsl(var(--primary-foreground));
  padding: 0.25rem 0.75rem;
  border-radius: 9999px;
  font-weight: 600;
  font-size: 0.875rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
}

.category-button {
  padding: 0.75rem 0.5rem;
  text-align: center;
  font-weight: 500;
  font-size: 0.875rem;
  transition: background-color 0.2s ease;
}

.category-button.active {
  background-color: hsl(var(--primary));
  color: hsl(var(--primary-foreground));
  font-weight: 600;
}

.category-button:not(.active) {
  background-color: hsl(var(--background));
  color: hsl(var(--foreground));
}

.category-button:not(.active):active {
  background-color: hsl(var(--muted));
}

/* Animations */
@keyframes fade-in {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-fade-in {
  animation: fade-in 0.3s ease-out forwards;
}

@keyframes reorder-pulse {
  0% {
    transform: scale(1);
    box-shadow: 0 0 0 rgba(var(--primary), 0);
  }
  50% {
    transform: scale(1.01);
    box-shadow: 0 0 10px rgba(var(--primary), 0.2);
  }
  100% {
    transform: scale(1);
    box-shadow: 0 0 0 rgba(var(--primary), 0);
  }
}

.reordering {
  animation: reorder-pulse 0.3s ease-in-out;
}

/* Optimize for older devices */
@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

